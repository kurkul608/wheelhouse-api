// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MANAGER
  SUPER_ADMIN
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  tgId           Int?       @unique
  username       String?
  firstName      String?
  lastName       String?
  phoneNumber    String?
  languageCode   String?
  roles          UserRole[] @default([USER])
  client_orders  Order[]    @relation("Client")
  manager_orders Order[]    @relation("Manager")
  updatedAt      DateTime   @updatedAt
  createdAt      DateTime   @default(now())
  Bucket         Bucket?
  Wishlist       Wishlist?
}

model Specification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  field     String
  fieldName String
  value     String
  colorHex  String?
  carCard   CarCard  @relation(fields: [carCardId], references: [id])
  carCardId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([field, value])
}

enum FiatAsset {
  USD
  EUR
  RUB
  BYN
  UAH
  GBP
  CNY
  KZT
  UZS
  GEL
  TRY
  AMD
  THB
  INR
  BRL
  IDR
  AZN
  AED
  PLN
  ILS
}

model CarCard {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  externalId     String?
  inStock        Boolean         @default(false)
  specifications Specification[]
  carModel       String?
  carBrand       String?
  carYear        String?
  photos         File[]
  importedPhotos String[]
  description    String
  price          String?
  currency       FiatAsset?
  isActive       Boolean
  BucketCarCard  BucketCarCard[]
  orderIds       String[]        @db.ObjectId
  orders         Order[]         @relation(fields: [orderIds], references: [id])
  wishlistIds    String[]        @db.ObjectId
  wishlists      Wishlist[]      @relation(fields: [wishlistIds], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([isActive, inStock, createdAt])
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  domain    String
  file_size Int
  key       String
  bucket    String
  CarCard   CarCard? @relation(fields: [carCardId], references: [id])
  carCardId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation("Client", fields: [userId], references: [id])
  userId     String    @db.ObjectId
  manager    User?     @relation("Manager", fields: [userId], references: [id])
  managerId  String?
  carCardIds String[]  @db.ObjectId
  carCards   CarCard[] @relation(fields: [carCardIds], references: [id])
  messageId  String?
}

model Bucket {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @unique @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  BucketCarCard BucketCarCard[]
}

model BucketCarCard {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bucketId  String   @db.ObjectId
  bucket    Bucket   @relation(fields: [bucketId], references: [id])
  carCardId String   @db.ObjectId
  carCard   CarCard  @relation(fields: [carCardId], references: [id])
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @unique @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  carCardIds String[]  @db.ObjectId
  carCards   CarCard[] @relation(fields: [carCardIds], references: [id])
}

model Video {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  filename String
  fileId   String
}
